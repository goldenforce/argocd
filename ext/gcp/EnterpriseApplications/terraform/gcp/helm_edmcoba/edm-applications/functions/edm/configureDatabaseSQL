function configureDatabaseSQL()
{
	## Initialize
	configureDatabaseSQLStatus="Failed"
	configurePlatformStateSetTaskStatus="Failed"
	configureDatabaseSQLConfigurations="${configurations_folder}/databasesql/databasesql.txt"

	now=`date -u '+%Y%m%d_%H%M'`
	configureDatabaseSQLStartTime=$(date +%s)
	echoLog "INFO" "Job - $(hostname) - Image - Repository - ${application_image}" "Configure DatabaseSQL" "True" | tee -a ${configureDatabaseSQLLogFile}
	echoLog "INFO" "All - Configurations - Begin" "Configure DatabaseSQL" | tee -a ${configureDatabaseSQLLogFile}

	## Check if DatabaseSQL configuration present
	if [ ! -f ${configureDatabaseSQLConfigurations} ]; then
		configureDatabaseSQLPlatformStateSetTask
		configureDatabaseSQLStatus="Completed"
		configureDatabaseSQLPlatformStateSetTask
  		return
	fi
     
	## Read DatabaseSQL Configurations
	while IFS="^" read -r description sql schema
	do
		if [ "$description" == "description" ] || [ -z "$description" ]; then
			continue
		fi
		descriptionFile="${configureDatabaseSQLWorkFolder}/work/${description}.log"
		_configureDatabaseSQLExecute "${description}" "${sql}" "${schema}"
	done < ${configureDatabaseSQLConfigurations}

	## Final
	computeElapsedTime ${configureDatabaseSQLStartTime}
	logStatus="INFO"
	if grep -i "ERROR" "${configureDatabaseSQLLogFile}"; then
		configureDatabaseSQLStatus="Failed"
		logStatus="ERROR"
	else
		configureDatabaseSQLStatus="Completed"
		logStatus="INFO"
	fi

	echoLog "${logStatus}" "All - Configurations - ${configureDatabaseSQLStatus} - ${elapsedTimeTaken}" "Configure DatabaseSQL" | tee -a ${configureDatabaseSQLLogFile}
	configureDatabaseSQLPlatformStateSetTask
}
function configureDatabaseSQLPlatformStateSetTask()
{
	### Process Platform State
	configurePlatformStateSetTask "configureDatabaseSQL" "${edm_version}" "${configureDatabaseSQLStatus}"
}

### Common Executor
function _configureDatabaseSQLExecute()
{
	### Initialize
	description="$1" 
	sqlStatement=$2
	schema="$3"
	configureDatabaseSQLFile="${configureDatabaseSQLWorkFolder}/work/configureDatabaseSQL-${description}.sql"
	configureDatabaseSQLExecuteLogFile="${configureDatabaseSQLWorkFolder}/work/configureDatabaseSQL-${description}.log"
	configureDatabaseSQLExecuteStatus="Failed"

	### Get Schema Details
	unset gemSchemaUser 
	unset gemSchemaUserPassword
	getDatabaseSchemaDetails ${schema}
	
	## JDBC Url
	initializeDatabase
	JDBC_Url="jdbc:${database_connection_provider}${Database_Host}:${Database_Port}/${Database_Service}?autosave=conservative${SSL_Argument_JDBC}"

	### Execute
	cd /ext/app/dbTools
	jarName=`ls /ext/app/dbTools/${database_connection_jar}*.jar`
	java -cp jdbcquery.jar:${jarName}  Main ${JDBC_Url} ${gemSchemaUser} ${gemSchemaUserPassword} "${sqlStatement}" > ${configureDatabaseSQLExecuteLogFile}  2>>${configureDatabaseSQLExecuteLogFile}

	### Check Error
	if grep -iE "ERROR|Query execution failed|Exception in thread" "${configureDatabaseSQLExecuteLogFile}"; then
		configureDatabaseSQLExecuteLogFileErrorRename=`echo "${configureDatabaseSQLExecuteLogFile/.log/.err}"`
		mv "${configureDatabaseSQLExecuteLogFile}" "${configureDatabaseSQLExecuteLogFileErrorRename}" 2>/dev/null
		echoLog "ERROR" "${description} - Failed" "Configure DatabaseSQL" | tee -a ${configureDatabaseSQLLogFile}
	else
		echoLog "INFO" "${description} - Completed" "Configure DatabaseSQL" | tee -a ${configureDatabaseSQLLogFile}
	fi

}
