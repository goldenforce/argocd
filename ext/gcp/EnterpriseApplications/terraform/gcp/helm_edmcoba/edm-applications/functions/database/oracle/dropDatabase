### Drop Database
function dropDatabase()
{
	### Initialize
	initializeDatabase

	## Set directories/files
	now=`date -u '+%Y%m%d_%H%M'`
	dropDatabaseLogFolder="/${mount_home}/logs/DatabaseOperations/dropDatabase/${now}"
	dropDatabaseLogFile=${dropDatabaseLogFolder}/dropDatabase.log
	dropDatabaseWorkFolder="/${mount_home}/logs/DatabaseOperations/dropDatabase/${now}/work"

	### Create folders
	rm -rf ${dropDatabaseLogFolder} 
	mkdir -p ${dropDatabaseLogFolder} ${dropDatabaseWorkFolder}

	### Drop Roles
	for schema in $databaseSchemaDetails 
	do
		getDatabaseSchemaOwnerUsersDetails ${schema}
		executeCommandAndCheckError "dropDatabaseRole ${gemSchemaOwner} ${dropDatabaseWorkFolder}" "Drop Database" "Role Drop - ${gemSchemaOwner}" "${dropDatabaseLogFile}" "dropDatabaseRoleSQLError"
		executeCommandAndCheckError "dropDatabaseRole ${gemSchemaUser} ${dropDatabaseWorkFolder}" "Drop Database" "Role Drop - ${gemSchemaUser}" "${dropDatabaseLogFile}" "dropDatabaseRoleSQLError"
    done
	executeCommandAndCheckError "dropDatabaseRole GS_GC_ROLE ${dropDatabaseWorkFolder}" "Drop Database" "Role Drop - GS_GC_ROLE" "${dropDatabaseLogFile}" "dropDatabaseRoleSQLError"
	executeCommandAndCheckError "dropDatabaseRole GS_GC_RUNTIME_ROLE ${dropDatabaseWorkFolder}" "Drop Database" "Role Drop - GS_GC_RUNTIME_ROLE" "${dropDatabaseLogFile}" "dropDatabaseRoleSQLError"
	executeCommandAndCheckError "dropDatabaseRole GS_REP_ROLE ${dropDatabaseWorkFolder}" "Drop Database" "Role Drop - GS_REP_ROLE" "${dropDatabaseLogFile}" "dropDatabaseRoleSQLError"
	executeCommandAndCheckError "dropDatabaseRole GS_APP_REP_ROLE ${dropDatabaseWorkFolder}" "Drop Database" "Role Drop - GS_APP_REP_ROLE" "${dropDatabaseLogFile}" "dropDatabaseRoleSQLError"
}
