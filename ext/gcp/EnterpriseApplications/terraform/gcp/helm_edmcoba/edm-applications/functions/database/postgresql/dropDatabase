### Drop Database
function dropDatabase()
{
	### Initialize
	initializeDatabase

	## Set directories/files
	now=`date -u '+%Y%m%d_%H%M'`
	dropDatabaseLogFolder="/${mount_home}/logs/DatabaseOperations/dropDatabase/${now}"
	dropDatabaseLogFile=${dropDatabaseLogFolder}/dropDatabase.log
	dropDatabaseWorkFolder="/${mount_home}/logs/DatabaseOperations/dropDatabase/${now}/work"

	### Create folders
	rm -rf ${dropDatabaseLogFolder} 
	mkdir -p ${dropDatabaseLogFolder} ${dropDatabaseWorkFolder}

	### Check if Database exists
	checkDatabaseExists
	if [ ! "${databaseExists}" == "1" ]; then
		echoLog "ERROR" "Drop Database - Failed - Database ${Database_Name} doesnot exist" | tee -a ${dropDatabaseLogFile}
		exit 1
	fi

	### Drop Database SQL
	dropDatabaseSQLFile="${dropDatabaseWorkFolder}/dropDatabase.sql"
	dropDatabaseSQLError=${dropDatabaseWorkFolder}/dropDatabaseSql.err
	cat > ${dropDatabaseSQLFile} <<- EOM
		REVOKE CONNECT ON DATABASE ${Database_Name} FROM public;
		ALTER DATABASE ${Database_Name} WITH CONNECTION LIMIT 0;
		SELECT 
			pg_terminate_backend(pg_stat_activity.pid)
		FROM pg_stat_activity
			WHERE pg_stat_activity.datname = '${Database_Name}'
			AND pid <> pg_backend_pid();
		DROP DATABASE IF EXISTS ${Database_Name};
	EOM

	### Drop Database Execute
	executeCommand="export PGPASSWORD=${Database_Owner_Password}; "
	executeCommand+="psql \"${SSL_Argument} host=${Database_Host} port=${Database_Port} user=${Database_Owner_User}\" -f ${dropDatabaseSQLFile} > ${dropDatabaseSQLError} 2>>${dropDatabaseSQLError} "
	executeCommandAndCheckError "${executeCommand}" "Drop Database" "Database Name - ${Database_Name}" "${dropDatabaseLogFile}" "dropDatabaseSQLError"

	### Drop Roles
	for schema in $databaseSchemaDetails 
	do
		getDatabaseSchemaOwnerUsersDetails ${schema}
		roleName=`psql "${SSL_Argument} host=${Database_Host} port=${Database_Port} user=${Database_Owner_User} dbname=postgres" -t -c "SELECT rolname FROM pg_roles WHERE rolname = '${gemSchemaOwner}';"`
		roleName=`echo ${roleName} | xargs`
		if [ ! -z "${roleName}" ]; then
			executeCommandAndCheckError "dropDatabaseRole ${roleName} ${dropDatabaseWorkFolder}" "Drop Database" "Role Drop - ${roleName}" "${dropDatabaseLogFile}" "dropDatabaseRoleSQLError"
		fi
		roleName=`psql "${SSL_Argument} host=${Database_Host} port=${Database_Port} user=${Database_Owner_User} dbname=postgres" -t -c "SELECT rolname FROM pg_roles WHERE rolname = '${gemSchemaUser}';"`
		roleName=`echo ${roleName} | xargs`
		if [ ! -z "${roleName}" ]; then
			executeCommandAndCheckError "dropDatabaseRole ${roleName} ${dropDatabaseWorkFolder}" "Drop Database" "Role Drop - ${roleName}" "${dropDatabaseLogFile}" "dropDatabaseRoleSQLError"
		fi
    done
}
