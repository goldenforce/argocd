### Basic, Annotations
{{- $basic := include "basic" . | fromYaml }}
{{- $annotationsLabels := include "annotationsLabels" . | fromYaml }}
{{- $annotationsLabelsService := include "annotationsLabelsService" . | fromYaml }}
### Applications
{{- $applications := include "applications" . | fromYaml }}
### Ingresses
{{- $ingresses := include "ingresses" . | fromYaml }}
### Init container
{{- $initContainer := include "initContainer" . | fromYaml }}
### Volume Mounts
{{- $volumeMounts := include "volumeMounts" . | fromYaml }}
### Volumes
{{- $volumes := include "volumes" . | fromYaml }}
### Checksum
{{- $checkSum := include "checkSum" . | fromYaml }}
### Custom
{{- $custom := include "custom" . | fromYaml }}
###
{{- if $basic.basic.processApplications }}
###
{{- range $k, $v := $applications.applications -}}
{{- if eq "Insight" $k }}
apiVersion: v1
kind: Service
metadata:
  name: {{ lower $k }}
  annotations:
    {{- with $annotationsLabelsService.service.annotations }}
    {{ toYaml . | nindent 4 }}
    {{- end }}

    ### Openshift
    {{- if eq $.Values.common.cloud "openshift" }}
    {{- if eq $.Values.ingresses.ingress.ui.ingressClassName "openshift-default" }}
    service.beta.openshift.io/serving-cert-secret-name: {{ printf "edm-openshift-%s" (lower $k) }}
    {{- end }}
    {{- end }}
  labels:
    cluster: {{ lower $k }}
    app: {{ lower $k }}
    {{- with $annotationsLabels.common.labels }}
    {{ toYaml . | nindent 4 }}
    {{- end }}
spec:
  ports:
  - name: https
    port: {{ $v.port }}
    protocol: TCP
    targetPort: {{ $v.port }}
  selector:
    cluster: {{ lower $k }}
  sessionAffinity: ClientIP
  type: ClusterIP
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ lower $k }}
  annotations:
    {{- with $annotationsLabels.common.annotations }}
    {{ toYaml . | nindent 4 }}
    {{- end }}
    checksum/edm-applications-checkSum: {{ $checkSum  | toJson | sha256sum }}
  labels:
    cluster: {{ lower $k }}
    app: {{ lower $k }}
    {{- with $annotationsLabels.common.labels }}
    {{ toYaml . | nindent 4 }}
    {{- end }}
spec:
  serviceName: {{ lower $k }}
  replicas: 1
  selector:
    matchLabels:
      cluster: {{ lower $k }}
      app: {{ lower $k }}
      {{- with $annotationsLabels.common.labels }}
      {{ toYaml . | nindent 6 }}
      {{- end }}
  template:
    metadata:
      name: {{ lower $k }}
      annotations:
        {{- with $annotationsLabels.common.annotations }}
        {{ toYaml . | nindent 8 }}
        {{- end }}
        checksum/edm-applications-checkSum: {{ $checkSum  | toJson | sha256sum }}
      labels:
        cluster: {{ lower $k }}
        app: {{ lower $k }}
        {{- with $annotationsLabels.common.labels }}
        {{ toYaml . | nindent 8 }}
        {{- end }}
    spec:
      securityContext:
        runAsUser: {{ $v.securityContext.runAsUser }}
        runAsGroup: {{ $v.securityContext.runAsGroup }}
        fsGroup: {{ $v.securityContext.fsGroup }}
        fsGroupChangePolicy: {{ $v.securityContext.fsGroupChangePolicy }}
      automountServiceAccountToken: true
      serviceAccountName: {{ $basic.basic.cluster.serviceAccountName }}
      terminationGracePeriodSeconds: 0
      ### Image Pull Secret
      {{- if $basic.basic.imagePullSecretsEnabled }}
      imagePullSecrets:
        - name: {{ $basic.basic.imagePullSecretsName }}
      {{- end }}
      ### Node Affinity
      {{- with $basic.basic.cluster.node }}
      {{ toYaml . | nindent 6 }}
      {{- end }}
      ### Init container
      {{- with $initContainer }}
      {{- with index . $k }}
      {{ toYaml . | nindent 6 }}
      {{- end }}
      {{- end }}
      ### Init container - Custom
      {{- if $basic.basic.customHelm }}
      {{- with $custom.custom.initContainers }}
      {{ toYaml . | nindent 6 }}
      {{- end }}
      {{- end }}
      containers:
      - name: {{ lower $k }}
        image: {{ $applications.applications.Insight.image }}
        imagePullPolicy: {{ $basic.basic.imagePullPolicy }}
        envFrom:
        - configMapRef:
            name: edm-applications-config-map
            optional: false
        env:
        - name: application_image
          value: {{ $applications.applications.Insight.image | quote }}
        {{- if $basic.basic.customHelm }}
        {{- with $custom.custom.env }}
        {{ toYaml . | nindent 8 }}
        {{- end }}
        {{- end }}
        ports:
        - containerPort: {{ $v.port }}
          name: https
          protocol: TCP
        resources:
          limits:
            cpu: {{ $v.resources.limits.cpu }}
            memory: {{ $v.resources.limits.memory }}
          requests:
            cpu: {{ $v.resources.requests.cpu }}
            memory: {{ $v.resources.requests.memory }}
        command: ["/bin/bash", "-c"]
        args: 
        - |
          ### Load Scripts
          . /etc/edm/functions/edm_functions.sh

          ## Set Home
          InsightHome=/ext/app/insight
          InsightMount=/${mount_home}/app/insight
          mkdir -p $InsightHome

          ## Initialize - Logs
          Application_Logs=/${logs_home}/logs/UtilityApplications/Insight
          mkdir -p $Application_Logs

          ### Check if Database running
          while true;
          do
             ## Check if Database/Schemas accessible
             if [ "$(checkDatabaseSchemasVerify)" == "Completed" ]; then
                touch /tmp/healthy
                break
             fi
             echoLog "ERROR" "Schema - Creation - Failed" "Insight" | tee -a ${Application_Logs}/jvmOperations.log
             sleep 20
          done

          ## Configure Insight Configurations
          configureInsight

          ## Logs
          serverLog="/${logs_home}/logs/UtilityApplications/Insight/Insight.log"
          mkdir -p "$(dirname "$serverLog")"
          shortDate=$(date +"%Y%m%d%H%M")
          if test -f "$serverLog"; then
             mv $serverLog $serverLog.$shortDate
          fi		 

          ## Start Insight
          echoLog "INFO" "Insight - $(hostname) - Image - Repository - ${application_image}" "Utility Application" "True" | tee -a /$logs_home/logs/UtilityApplications/UtilityApplications.log

          ## Run infinite
          processStarted="False"
          while true;
          do
             if [ -f "/${logs_home}/logs/Initialize/servers/restartInsight" ]; then
                pids=$(pgrep -f "insight" | grep -v '^1$')
                for pid in $pids; do kill -9 $pid; done
                rm -rf /${logs_home}/logs/Initialize/servers/restartInsight
                echoLog "INFO" "Insight - $(hostname) - Stopped" "Utility Application" "True" | tee -a /$logs_home/logs/UtilityApplications/UtilityApplications.log
                processStarted="False"
                sleep 20
             fi
             if [ "$processStarted" == "False" ]; then
                startInsight &
                processStarted="True"
                echoLog "INFO" "Insight - $(hostname) - Started" "Utility Application" "True" | tee -a /$logs_home/logs/UtilityApplications/UtilityApplications.log
             fi
             sleep 20
          done
        readinessProbe:
          failureThreshold: 5
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
          tcpSocket:
            port: {{ $v.port }}
        ### Volume Mounts
        {{- with $volumeMounts }}
        {{- with index . $k }}
        {{ toYaml . | nindent 8 }}
        {{- end }}
        {{- end }}
        ### Volume Mounts - Custom
        {{- if $basic.basic.customHelm }}
        {{- with $custom.custom.volumeMounts }}
        {{ toYaml . | nindent 8 }}
        {{- end }}
        {{- end }}
      ### Volumes
      {{- with $volumes }}
      {{- with index . $k }}
      {{ toYaml . | nindent 6 }}
      {{- end }}
      {{- end }}
      ### Volumes - Custom
      {{- if $basic.basic.customHelm }}
      {{- with $custom.custom.volumes }}
      {{ toYaml . | nindent 6 }}
      {{- end }}
      {{- end }}
{{- end }}
{{- end }}
{{- end }}
