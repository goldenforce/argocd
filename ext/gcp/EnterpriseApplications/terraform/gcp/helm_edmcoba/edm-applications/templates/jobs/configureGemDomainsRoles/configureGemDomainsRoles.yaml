### Basic, Annotations
{{- $basic := include "basic" . | fromYaml }}
### Init container
{{- $initContainer := include "initContainer" . | fromYaml }}
### Volume Mounts
{{- $volumeMounts := include "volumeMounts" . | fromYaml }}
### Volumes
{{- $volumes := include "volumes" . | fromYaml }}
### Jobs
{{- $jobs := include "jobs" . | fromYaml }}
### Custom
{{- $custom := include "custom" . | fromYaml }}
###
{{- if $basic.basic.processJobs }}
###
{{- range $k, $v := $jobs.jobs -}}
{{- if and (eq $v.type "configureGemDomainsRoles") $v.enabled }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ lower $k }}
  annotations:
    {{- with $v.annotations }}
    {{ toYaml . | nindent 4 }}
    {{- end }}
  labels:
    {{- with $v.labels }}
    {{ toYaml . | nindent 4 }}
    {{- end }}
spec:
  template:
    metadata:
      name: {{ lower $k }}
      labels:
        {{- with $v.labels }}
        {{ toYaml . | nindent 8 }}
        {{- end }}
    spec:
      securityContext:
        runAsUser: {{ $v.securityContext.runAsUser }}
        runAsGroup: {{ $v.securityContext.runAsGroup }}
        fsGroup: {{ $v.securityContext.fsGroup }}
        fsGroupChangePolicy: {{ $v.securityContext.fsGroupChangePolicy }}
      automountServiceAccountToken: true
      serviceAccountName: {{ $basic.basic.cluster.serviceAccountName }}
      ### Image Pull Secret
      {{- if $basic.basic.imagePullSecretsEnabled }}
      imagePullSecrets:
        - name: {{ $basic.basic.imagePullSecretsName }}
      {{- end }}
      ### Node Affinity
      {{- with $basic.basic.cluster.node }}
      {{ toYaml . | nindent 6 }}
      {{- end }}
      ### Init container
      {{- with $initContainer }}
      {{- with index . $k }}
      {{ toYaml . | nindent 6 }}
      {{- end }}
      {{- end }}
      ### Init container - Custom
      {{- if $basic.basic.customHelm }}
      {{- with $custom.custom.initContainers }}
      {{ toYaml . | nindent 6 }}
      {{- end }}
      {{- end }}
      containers:
      - name: {{ lower $k }}
        image: {{ $v.image }}
        imagePullPolicy: {{ $basic.basic.imagePullPolicy }}
        env:
        - name: databaseSchemas
          value: {{ $basic.basic.databaseSchemas | quote }}
        - name: databaseSchemaDetails
          value: {{ $basic.basic.databaseSchemaDetails | quote }}
        - name: application_image
          value: {{ $v.image | quote }}
        {{- if $basic.basic.customHelm }}
        {{- with $custom.custom.env }}
        {{ toYaml . | nindent 8 }}
        {{- end }}
        {{- end }}
        envFrom:
        - configMapRef:
            name: edm-applications-config-map
            optional: false
        command: ["/bin/sh", "-c"]
        args: 
        - |
          ### Load Scripts
          . /etc/edm/functions/edm_functions.sh

          ## Run infinite
          runInfinite="False"

          now=`date -u '+%Y%m%d_%H%M'`
          checkDatabaseSchemasStartTime=$(date +%s)
          if [ ! "$(checkDatabaseSchemasVerify)" == "Completed" ]; then
             computeElapsedTime ${configureGemStartTime}
             echoLog "ERROR" "Gem - Schemas Access - Failed - ${elapsedTimeTaken}" "Jobs Summary" | tee -a $log_all_jobs_summary
             exit 1
          fi

          ## Configure Gem
          echoLog "INFO" "Gem - Configurations - Started" "Jobs Summary" | tee -a $log_all_jobs_summary
          now=`date -u '+%Y%m%d_%H%M'`
          configureGemStartTime=$(date +%s)
          configureGemStatus="Completed"
          if [ "${gem_enable}" == "true" ] && [ ! "$(configurePlatformStateGetStatus configureGem ${edm_version})" == "Completed" ]; then
             configureGem 
             computeElapsedTime ${configureGemStartTime}
             ## Configure Gem
             if [ "${configureGemStatus}" == "Completed" ]; then
                echoLog "INFO" "Gem - Configurations - Completed - ${elapsedTimeTaken}" "Jobs Summary" | tee -a $log_all_jobs_summary
             else
                echoLog "ERROR" "Gem - Configurations - Failed - ${elapsedTimeTaken}" "Jobs Summary" | tee -a $log_all_jobs_summary
                exit 1
             fi
             ## Platform Status
             if [ ! "${configurePlatformStateSetTaskStatus}" == "Completed" ]; then
                echoLog "ERROR" "Platform Status - Config. Gem - Failed - ${elapsedTimeTaken}" "Jobs Summary" | tee -a $log_all_jobs_summary
                exit 1
             fi
          else
             echoLog "INFO" "Gem - Configurations - Skipped" "Jobs Summary" | tee -a $log_all_jobs_summary
          fi
          
          ## Configure Custom Roles
          echoLog "INFO" "Custom Roles - Configurations - Started" "Jobs Summary" | tee -a $log_all_jobs_summary
          now=`date -u '+%Y%m%d_%H%M'`
          configureCustomRolesStartTime=$(date +%s)
          if [ "${customroles_enabled}" == "true" ] && [ ! "$(configurePlatformStateGetStatus configureCustomRoles)" == "Completed" ]; then
             configureCustomRoles 
             computeElapsedTime ${configureCustomRolesStartTime}
             ## Configure Custom Roles
             if [ "${configureCustomRolesStatus}" == "Completed" ]; then
                echoLog "INFO" "Custom Roles - Configurations - Completed - ${elapsedTimeTaken}" "Jobs Summary" | tee -a $log_all_jobs_summary
             else
                echoLog "ERROR" "Custom Roles - Configurations - Failed - ${elapsedTimeTaken}" "Jobs Summary" | tee -a $log_all_jobs_summary
                exit 1
             fi
             ## Platform Status
             if [ ! "${configurePlatformStateSetTaskStatus}" == "Completed" ]; then
                echoLog "ERROR" "Platform Status - Custom Roles - Failed - ${elapsedTimeTaken}" "Jobs Summary" | tee -a $log_all_jobs_summary
                exit 1
             fi
          else
             echoLog "INFO" "Custom Roles - Configurations - Skipped" "Jobs Summary" | tee -a $log_all_jobs_summary
          fi

          ## Configure Reorg Database
          echoLog "INFO" "Database - Reorg - Started" "Jobs Summary" | tee -a $log_all_jobs_summary
          now=`date -u '+%Y%m%d_%H%M'`
          configureDatabaseReorgStartTime=$(date +%s)
          if [ "${databasereorg_enable}" == "true" ]; then
             configureDatabaseReorg ${databasereorg_options} ${configureDatabaseReorgWorkFolder}/work ${configureDatabaseReorgWorkFolder}/configureDatabaseReorg.log
             computeElapsedTime ${configureDatabaseReorgStartTime}
             ## Configure Reorg Database
             if [ "${configureDatabaseReorgStatus}" == "Completed" ]; then
                echoLog "INFO" "Database - Reorg - Completed - ${elapsedTimeTaken}" "Jobs Summary" | tee -a $log_all_jobs_summary
             else
                echoLog "ERROR" "Database - Reorg - Failed - ${elapsedTimeTaken}" "Jobs Summary" | tee -a $log_all_jobs_summary
                exit 1
             fi
          else
             echoLog "INFO" "Database - Reorg - Skipped" "Jobs Summary" | tee -a $log_all_jobs_summary
          fi

          ## Copy Mount Archive to software
          if [ "${edm_mount}" == "true" ]; then
             echoLog "INFO" "Platform Status - Mount Arc. to Software - Started" "Jobs Summary" | tee -a $log_all_jobs_summary
             now=`date -u '+%Y%m%d_%H%M'`
             configureMountArchiveToSoftwareStartTime=$(date +%s)
             if [ ! "${gem_enable}" == "true" ] || [ "$(configurePlatformStateGetStatus configureGem ${edm_version})" == "Completed" ]; then
                configurePlatformStateSetTask "configureMountArchive" "${edm_version}" "Completed"
                computeElapsedTime ${configureMountArchiveToSoftwareStartTime}
                ## Platform Status
                if [ ! "${configurePlatformStateSetTaskStatus}" == "Completed" ]; then
                   echoLog "ERROR" "Platform Status - Mount Arc. to Software - Failed - ${elapsedTimeTaken}" "Jobs Summary" | tee -a $log_all_jobs_summary
                   exit 1
                fi
                echoLog "INFO" "Platform Status - Mount Arc. to Software - Completed - ${elapsedTimeTaken}" "Jobs Summary" | tee -a $log_all_jobs_summary
             else
                echoLog "INFO" "Platform Status - Mount Arc. to Software - Skipped - ${elapsedTimeTaken}" "Jobs Summary" | tee -a $log_all_jobs_summary
             fi
          fi

          ## Configure startEDM
          echoLog "INFO" "Platform Status - Config. startEDM - Started" "Jobs Summary" | tee -a $log_all_jobs_summary
          now=`date -u '+%Y%m%d_%H%M'`
          configureStartEdmStartTime=$(date +%s)
          if [ ! "${gem_enable}" == "true" ] || [ "$(configurePlatformStateGetStatus configureGem ${edm_version})" == "Completed" ]; then
             echo "installed_edm_version=$edm_version" > ${start_edm}
             configurePlatformStateSetTask "startEDM" "${edm_version}" "Completed"
             computeElapsedTime ${configureStartEdmStartTime}
             ## Platform Status
             if [ ! "${configurePlatformStateSetTaskStatus}" == "Completed" ]; then
                echoLog "ERROR" "Platform Status - Config. startEDM - Failed - ${elapsedTimeTaken}" "Jobs Summary" | tee -a $log_all_jobs_summary
                exit 1
             fi
          fi
          echoLog "INFO" "Platform Status - Config. startEDM - Completed - ${elapsedTimeTaken}" "Jobs Summary" | tee -a $log_all_jobs_summary
          
          ## Configure Domains
          echoLog "INFO" "Domains - Configurations - Started" "Jobs Summary" | tee -a $log_all_jobs_summary
          now=`date -u '+%Y%m%d_%H%M'`
          configureDomainsStartTime=$(date +%s)
          configureDomainsStatus="Completed"
          if [ "${configuredomains_enable}" == "true" ] && [ ! "$(configurePlatformStateGetStatus configureDomains ${edm_version})" == "Completed" ]; then
             configureDomains 
             computeElapsedTime ${configureDomainsStartTime}
             ## Configure Domains
             if [ "${configureDomainsStatus}" == "Completed" ]; then
                echoLog "INFO" "Domains - Configurations - Completed - ${elapsedTimeTaken}" "Jobs Summary" | tee -a $log_all_jobs_summary
             else
                echoLog "ERROR" "Domains - Configurations - Failed - ${elapsedTimeTaken}" "Jobs Summary" | tee -a $log_all_jobs_summary
                exit 1
             fi
             ## Platform Status
             if [ ! "${configurePlatformStateSetTaskStatus}" == "Completed" ]; then
                echoLog "ERROR" "Platform Status - Config. Domains - Failed - ${elapsedTimeTaken}" "Jobs Summary" | tee -a $log_all_jobs_summary
                exit 1
             fi
          else
             echoLog "INFO" "Domains - Configurations - Skipped" "Jobs Summary" | tee -a $log_all_jobs_summary
          fi

          ## Configure Database SQL
          echoLog "INFO" "DatabaseSQL - Configurations - Started" "Jobs Summary" | tee -a $log_all_jobs_summary
          now=`date -u '+%Y%m%d_%H%M'`
          configureDatabaseSQLStartTime=$(date +%s)
          configureDatabaseSQLStatus="Completed"
          configureDatabaseSQL 
          computeElapsedTime ${configureDatabaseSQLStartTime}
          if [ "${configureDatabaseSQLStatus}" == "Completed" ]; then
                echoLog "INFO" "DatabaseSQL - Configurations - Completed - ${elapsedTimeTaken}" "Jobs Summary" | tee -a $log_all_jobs_summary
          else
             echoLog "ERROR" "DatabaseSQL - Configurations - Failed - ${elapsedTimeTaken}" "Jobs Summary" | tee -a $log_all_jobs_summary
             exit 1
          fi
          ## Platform Status
          if [ "${configurePlatformStateSetTaskStatus}" == "Completed" ]; then
             echoLog "INFO" "Platform Status - Config. DatabaseSQL - Completed - ${elapsedTimeTaken}" "Jobs Summary" | tee -a $log_all_jobs_summary
          else
             echoLog "ERROR" "Platform Status - Config. DatabaseSQL - Failed - ${elapsedTimeTaken}" "Jobs Summary" | tee -a $log_all_jobs_summary
             exit 1
          fi

          ## Check if to run infinitely
          if [ "${runInfinite}" == "True" ]; then
             while true;
             do
                tail > /dev/null
             done
          fi
        resources:
          limits:
            cpu: {{ $v.resources.limits.cpu }}
            memory: {{ $v.resources.limits.memory }}
          requests:
            cpu: {{ $v.resources.requests.cpu }}
            memory: {{ $v.resources.requests.memory }}
        ### Volume Mounts
        {{- with $volumeMounts }}
        {{- with index . $k }}
        {{ toYaml . | nindent 8 }}
        {{- end }}
        {{- end }}
        ### Volume Mounts - Custom
        {{- if $basic.basic.customHelm }}
        {{- with $custom.custom.volumeMounts }}
        {{ toYaml . | nindent 8 }}
        {{- end }}
        {{- end }}
      ### Volumes
      {{- with $volumes }}
      {{- with index . $k }}
      {{ toYaml . | nindent 6 }}
      {{- end }}
      {{- end }}
      ### Volumes - Custom
      {{- if $basic.basic.customHelm }}
      {{- with $custom.custom.volumes }}
      {{ toYaml . | nindent 6 }}
      {{- end }}
      {{- end }}
      restartPolicy: Never
  backoffLimit: 0
  ttlSecondsAfterFinished: 0
{{- end }}
{{- end }}
{{- end }}
---