### Basic, Annotations
{{- $basic := include "basic" . | fromYaml }}
{{- $annotationsLabels := include "annotationsLabels" . | fromYaml }}
{{- $annotationsLabelsService := include "annotationsLabelsService" . | fromYaml }}
{{- $annotationsLabelsServiceAccount := include "annotationsLabelsServiceAccount"  . | fromYaml }}
### Applications
{{- $applications := include "applications" . | fromYaml }}
### Ingresses
{{- $ingresses := include "ingresses" . | fromYaml }}
### Init container
{{- $initContainer := include "initContainer" . | fromYaml }}
### Volume Mounts
{{- $volumeMounts := include "volumeMounts" . | fromYaml }}
### Volumes
{{- $volumes := include "volumes" . | fromYaml }}
### Checksum
{{- $checkSum := include "checkSum" . | fromYaml }}
### Custom
{{- $custom := include "custom" . | fromYaml }}
###
{{- if $basic.basic.processApplications }}
###
{{- range $k, $v := $applications.applications -}}
{{- if eq "JvmMonitoring" $k }}
apiVersion: v1
kind: Service
metadata:
  name: {{ lower $k }}
  annotations:
    {{- with $annotationsLabelsService.service.annotations }}
    {{ toYaml . | nindent 4 }}
    {{- end }}
    
    ### Openshift
    {{- if eq $.Values.common.cloud "openshift" }}
    {{- if eq $.Values.ingresses.ingress.ui.ingressClassName "openshift-default" }}
    service.beta.openshift.io/serving-cert-secret-name: {{ printf "edm-openshift-%s" (lower $k) }}
    {{- end }}
    {{- end }}
  labels:
    cluster: {{ lower $k }}
    app: {{ lower $k }}
    {{- with $annotationsLabels.common.labels }}
    {{ toYaml . | nindent 4 }}
    {{- end }}
spec:
  ports:
  - name: http
    port: 4380
    protocol: TCP
    targetPort: 4380
  selector:
    cluster: {{ lower $k }}
  sessionAffinity: ClientIP
  type: ClusterIP
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ lower $k }}
  annotations:
    {{- with $annotationsLabels.common.annotations }}
    {{ toYaml . | nindent 4 }}
    {{- end }}
    checksum/edm-applications-checkSum: {{ $checkSum  | toJson | sha256sum }}
  labels:
    cluster: {{ lower $k }}
    app: {{ lower $k }}
    {{- with $annotationsLabels.common.labels }}
    {{ toYaml . | nindent 4 }}
    {{- end }}
spec:
  serviceName: {{ lower $k }}
  replicas: 1
  selector:
    matchLabels:
      cluster: {{ lower $k }}
      app: {{ lower $k }}
      {{- with $annotationsLabels.common.labels }}
      {{ toYaml . | nindent 6 }}
      {{- end }}
  template:
    metadata:
      name: {{ lower $k }}
      annotations:
        {{- with $annotationsLabels.common.annotations }}
        {{ toYaml . | nindent 8 }}
        {{- end }}
        checksum/edm-applications-checkSum: {{ $checkSum  | toJson | sha256sum }}
      labels:
        cluster: {{ lower $k }}
        app: {{ lower $k }}
        {{- with $annotationsLabels.common.labels }}
        {{ toYaml . | nindent 8 }}
        {{- end }}
    spec:
      securityContext:
        runAsUser: {{ $v.securityContext.runAsUser }}
        runAsGroup: {{ $v.securityContext.runAsGroup }}
        fsGroup: {{ $v.securityContext.fsGroup }}
        fsGroupChangePolicy: {{ $v.securityContext.fsGroupChangePolicy }}
      automountServiceAccountToken: true
      serviceAccountName: {{ $basic.basic.cluster.serviceAccountName }}
      terminationGracePeriodSeconds: 120
      ### Image Pull Secret
      {{- if $basic.basic.imagePullSecretsEnabled }}
      imagePullSecrets:
        - name: {{ $basic.basic.imagePullSecretsName }}
      {{- end }}
      ### Node Affinity
      {{- with $basic.basic.cluster.node }}
      {{ toYaml . | nindent 6 }}
      {{- end }}
      ### Init container
      {{- with $initContainer }}
      {{- with index . $k }}
      {{ toYaml . | nindent 6 }}
      {{- end }}
      {{- end }}
      ### Init container - Custom
      {{- if $basic.basic.customHelm }}
      {{- with $custom.custom.initContainers }}
      {{ toYaml . | nindent 6 }}
      {{- end }}
      {{- end }}
      containers:
      - name: {{ lower $k }}
        image: {{ $applications.applications.JvmMonitoring.image }}
        imagePullPolicy: {{ $basic.basic.imagePullPolicy }}
        env:
        - name: KUBERNETES_LABELS
          value: "cluster={{ lower $k }}"
        - name: functional_class
          value: "{{ lower $k }}"
        - name: functional_type
          value: "{{ $v.type }}"
        - name: jboss_instance_name
          value: "{{ $k }}"
        - name: port_offset
          value: "{{ $v.portOffset }}"
        - name: port
          value: "{{ $v.port }}"
        - name: local_home
          value: "{{ $v.local_home}}"
        - name: default_context_path
          value: {{ $v.contextPathDefault }}
        - name: curlSleepTime
          value: "{{ $v.curlSleepTime }}"
        - name: application_image
          value: {{ $v.image | quote }}
        {{- if $basic.basic.customHelm }}
        {{- with $custom.custom.env }}
        {{ toYaml . | nindent 8 }}
        {{- end }}
        {{- end }}
        envFrom:
        - configMapRef:
            name: edm-applications-config-map
            optional: false
        command: ["/bin/sh", "-c"]
        args: 
        - |
          ### Load Scripts
          . /etc/edm/functions/edm_functions.sh

          ### Main Process
          ### Create TNSNames ora
          if [ "$DatabaseType" == "oracle" ]; then
             createTNSNamesOra
          fi
          ### Create ODBC ini
          if [ "$DatabaseType" == "postgresql" ]; then
             createODBCIni
          fi

          ##### Copy local tar and scripts file
          cd /ext/app
          ## Copy local tar
          find '/home/app' -name '*.tar' -exec tar -xf {} \;
          ## Copy EDM Scripts
          cd /ext/app
          cp -r /etc/edm/scripts/edm/* .
          ## Copy from mount - if present
          if [ -d "/${logs_home}/software" ]; then
             mkdir -p software
             cp -R /${logs_home}/software/ApplicationConfigurations ./software/ApplicationConfigurations 2>/dev/null
             cp -R /${logs_home}/software/Deployment ./software/Deployment 2>/dev/null
             cp -R /${logs_home}/software/ServerScripts ./software/ServerScripts 2>/dev/null
          fi
           
          ## Initialize
          ## Initialize - Home
          Application_Logs=/${logs_home}/logs/EdmApplications/${jboss_instance_name}/$(hostname)
          mkdir -p $Application_Logs
          
          ## Initialize - Jboss
          jbossRunningOption="Local"
          sleepProcessTime=60
          infiniteRunningCount=0
          jbossStartOption="Local"

          while true;
          do
             if [ "$jbossStartOption" == "Crash" ]; then
                sleep $sleepProcessTime
                continue
             fi
             if [ -f "$start_edm" ]; then
                export $( cat ${start_edm} | xargs )
             else
                unset installed_edm_version
             fi
             checkJbossStartOption
             if [ "$jbossStartOption" == "Local" ]; then
                if [ "$jbossRunningOption" == "Mount" ]; then
                   stopJbossServer
                fi
                startLocalServer
             fi
             if [ "$jbossStartOption" == "Mount" ]; then
                if [ "$jbossRunningOption" == "Mount" ]; then
                   stopJbossServer
                fi
                startJbossServer
             fi
             sleep $sleepProcessTime
             ((infiniteRunningCount += 1))
          done
        ports:
        - containerPort: 9393
          name: https
          protocol: TCP
        resources:
          limits:
            cpu: {{ $v.resources.limits.cpu }}
            memory: {{ $v.resources.limits.memory }}
          requests:
            cpu: {{ $v.resources.requests.cpu }}
            memory: {{ $v.resources.requests.memory }}
        startupProbe:
          failureThreshold: {{ $v.probes.startupProbe.failureThreshold }}
          periodSeconds: {{ $v.probes.startupProbe.periodSeconds }}
          successThreshold: 1
          timeoutSeconds: 20
          exec:
            command: ["cat", "/tmp/startup"]
        readinessProbe:
          failureThreshold: {{ $v.probes.livenessProbe.failureThreshold }}
          periodSeconds: {{ $v.probes.livenessProbe.periodSeconds }}
          successThreshold: 1
          timeoutSeconds: 1
          exec:
            command: ["cat", "/tmp/ready"]
        livenessProbe:
          failureThreshold: {{ $v.probes.livenessProbe.failureThreshold }}
          periodSeconds: {{ $v.probes.livenessProbe.periodSeconds }}
          successThreshold: 1
          timeoutSeconds: 1
          exec:
            command: ["cat", "/tmp/liveness"]
        lifecycle:
          postStart:
            exec:
              command:
              - /bin/sh
              - -c
              - mkdir -p /${logs_home}/logs/EdmApplications
          preStop:
            exec:
              command:
              - /bin/sh
              - -c
              - . /etc/edm/functions/edm_functions.sh; Application_Logs=/${logs_home}/logs/EdmApplications/${jboss_instance_name}/$(hostname); stopJbossServer; echoLog "ERROR" "${jboss_instance_name} - $(hostname) - Terminated" "JVM Operation" "True" | tee -a /${logs_home}/logs/EdmApplications/${jboss_instance_name}/$(hostname)/jvmOperations.log; echoLog "INFO"  "${jboss_instance_name} - $(hostname) - Terminated" "EDM Application" "True" | tee -a /$logs_home/logs/EdmApplications/EdmApplications.log; sleep 60  
        ### Volume Mounts
        {{- with $volumeMounts }}
        {{- with index . $k }}
        {{ toYaml . | nindent 8 }}
        {{- end }}
        {{- end }}
        ### Volume Mounts - Custom
        {{- if $basic.basic.customHelm }}
        {{- with $custom.custom.volumeMounts }}
        {{ toYaml . | nindent 8 }}
        {{- end }}
        {{- end }}
      - name: {{ lower $k }}-keycloak-gatekeeper
        image: {{ $applications.applications.JvmMonitoring.imageGatekeeper }}
        imagePullPolicy: {{ $basic.basic.imagePullPolicy }}
        command: ["/bin/sh", "-c"]
        env:
        {{- if $basic.basic.customHelm }}
        {{- with $custom.custom.env }}
        {{ toYaml . | nindent 8 }}
        {{- end }}
        {{- end }}
        envFrom:
        - configMapRef:
            name: edm-applications-config-map
            optional: false
        args:
        - |
          ### Load Scripts
          . /etc/edm/functions/edm_functions.sh

          ### Multiple Roles formatted
          multipleRoles={{ $v.roles | quote }}
          roles=$(echo "$multipleRoles" | sed 's/\([^,]*\)/"\1"/g' | tr -d '\n') 

          ### Configuration file
          cat <<EOF > /ext/app/keycloak_gatekeeper/oauth2-proxy.conf
            provider="keycloak-oidc"
            client_id="{{ $k }}"
            client_secret="${Keycloak_client_secret}"
            proxy_prefix="/hawtio/oauth2"
            upstreams=["https://jvmmonitoring-0:9393"]
            oidc_issuer_url="https://{{ $ingresses.ingresses.ui.host }}/auth/realms/{{ $basic.basic.realm }}"
            profile_url="https://{{ $ingresses.ingresses.ui.host }}/auth/realms/{{ $basic.basic.realm }}/protocol/openid-connect/userinfo"
            allowed_roles=[${roles}]
            https_address="0.0.0.0:4380"
            cookie_secret="${Keycloak_cookie_secret}"
            email_domains=["*"]
            insecure_oidc_allow_unverified_email="true"
            skip_provider_button="true"
            custom_templates_dir="/ext/app/keycloak_gatekeeper"
            ssl_insecure_skip_verify="true"
            skip_oidc_discovery="true"
            login_url="https://{{ $ingresses.ingresses.ui.host }}/auth/realms/{{ $basic.basic.realm }}/protocol/openid-connect/auth"
            redeem_url="https://{{ $ingresses.ingresses.ui.host }}/auth/realms/{{ $basic.basic.realm }}/protocol/openid-connect/token"
            oidc_jwks_url="https://{{ $ingresses.ingresses.ui.host }}/auth/realms/{{ $basic.basic.realm }}/protocol/openid-connect/certs"
            tls_cert_file="/ext/app/protected/Certificates/ui/certificate.crt"
            tls_key_file="/ext/app/protected/Certificates/ui/private.key"
            ssl_upstream_insecure_skip_verify="true"
          EOF
          ### Start Oauth proxy
          cd /ext/app/keycloak_gatekeeper
          ./oauth2-proxy --config /ext/app/keycloak_gatekeeper/oauth2-proxy.conf
        ports:
        - containerPort: 4380
          name: http
          protocol: TCP
        ### Volume Mounts
        {{- with $volumeMounts }}
        {{- with index . $k }}
        {{ toYaml . | nindent 8 }}
        {{- end }}
        {{- end }}
        ### Volume Mounts - Custom
        {{- if $basic.basic.customHelm }}
        {{- with $custom.custom.volumeMounts }}
        {{ toYaml . | nindent 8 }}
        {{- end }}
        {{- end }}
      ### Volumes
      {{- with $volumes }}
      {{- with index . $k }}
      {{ toYaml . | nindent 6 }}
      {{- end }}
      {{- end }}
      ### Volumes - Custom
      {{- if $basic.basic.customHelm }}
      {{- with $custom.custom.volumes }}
      {{ toYaml . | nindent 6 }}
      {{- end }}
      {{- end }}
{{- end }}
{{- end }}
{{- end }}
