### Create Database
function createDatabase()
{
	### Initialize
	initializeDatabase

	mainLogFile="$1"
	createDatabaseWorkFolder="$2"
	createDatabaseSqlFile="${createDatabaseWorkFolder}/createDatabase.sql"
	createDatabaseLogFileError="${createDatabaseWorkFolder}/createDatabase.err"
	mkdir -p ${createDatabaseWorkFolder}
	
	### Create Database SQL
	cat > ${createDatabaseSqlFile} <<- EOM
		SET SERVEROUTPUT ON
		BEGIN
			EXECUTE IMMEDIATE 'CREATE ROLE GS_GC_ROLE';
		EXCEPTION
			WHEN OTHERS THEN
				IF SQLCODE <> -1921 THEN
					DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
				END IF;
		END;
		/
		BEGIN
			EXECUTE IMMEDIATE 'CREATE ROLE GS_GC_RUNTIME_ROLE';
		EXCEPTION
			WHEN OTHERS THEN
				IF SQLCODE <> -1921 THEN
					DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
				END IF;
		END;
		/
		BEGIN
			EXECUTE IMMEDIATE 'CREATE ROLE GS_REP_ROLE';
		EXCEPTION
			WHEN OTHERS THEN
				IF SQLCODE <> -1921 THEN
					DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
				END IF;
		END;
		/
		BEGIN
			EXECUTE IMMEDIATE 'CREATE ROLE GS_APP_REP_ROLE';
		EXCEPTION
			WHEN OTHERS THEN
				IF SQLCODE <> -1921 THEN
					DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
				END IF;
		END;
		/
		BEGIN
			EXECUTE IMMEDIATE 'GRANT CREATE VIEW, CREATE MATERIALIZED VIEW, QUERY REWRITE, CREATE PROCEDURE, CREATE SEQUENCE, CREATE TABLE , CREATE TRIGGER, CREATE TYPE, CREATE SYNONYM TO GS_GC_ROLE';
			EXECUTE IMMEDIATE 'GRANT EXECUTE ON DBMS_LOCK TO GS_GC_RUNTIME_ROLE';
			EXECUTE IMMEDIATE 'GRANT SELECT ON DBA_2PC_PENDING TO GS_GC_RUNTIME_ROLE';
			EXECUTE IMMEDIATE 'GRANT SELECT ON DBA_PENDING_TRANSACTIONS TO GS_GC_RUNTIME_ROLE';
			EXECUTE IMMEDIATE 'GRANT CREATE SEQUENCE, CREATE TABLE, CREATE SYNONYM TO GS_REP_ROLE';
		EXCEPTION
			WHEN OTHERS THEN
				DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
		END;
		/
		exit;
	EOM
	
	### Create Database Execute
	executeCommand+="sqlplus ${Database_Owner_User}/${Database_Owner_Password}@${DatabaseName_Schema_GC} @${createDatabaseSqlFile} > ${createDatabaseLogFileError} 2>>${createDatabaseLogFileError}"
	executeCommandAndCheckError "${executeCommand}" "Create Database" "Database Name - ${Database_Name}" ${mainLogFile} "createDatabaseLogFileError" "true"

	createDatabaseStatus="Failed"
	if [ "${executeCommandAndCheckErrorStatus}" == "Completed" ]; then
		createDatabaseStatus="Completed"
	fi
}
