### Assign Audit Triggers
function assignAUDITTriggers()
{
	### Initialize
	assignAUDITTriggersWorkFolder="$1"

	### Assign Audit Role to GC
	assignAUDITTriggersSQLFile="${assignAUDITTriggersWorkFolder}/assignAUDITTriggers.sql"
	assignAUDITTriggersSQLError="${assignAUDITTriggersWorkFolder}/assignAUDITTriggers.err"

	### Create Schema SQL
	cat > ${assignAUDITTriggersSQLFile} <<- EOM
		do \$\$
		declare 
			V_SCRIPT_ALL text;
			V_SCRIPT text;
			REC RECORD;
		begin
			V_SCRIPT_ALL:='';
			for REC in (select TBL_ID, TBL_DDL_NME from FT_T_TBDF where  COALESCE (audit_enabled_ind,'N')='Y' OR COALESCE (bi_temporal_ind,'N')='Y')
			loop 	
				V_SCRIPT:=  CDC_PKG_CREATE_CDC_TRIGGERS_FUNC(REC.TBL_DDL_NME,'${GEMSchemaOwner_AUDIT}','Y');       
				V_SCRIPT :=V_SCRIPT||chr(10);
				V_SCRIPT_ALL:=V_SCRIPT_ALL||coalesce (V_SCRIPT,'')||chr(10);
			end loop;
			V_SCRIPT_ALL:= 'DROP TRIGGER IF EXISTS ADEL_CDC_TRIGGER ON FT_O_ADEL;' || chr(10) || V_SCRIPT_ALL;
			execute V_SCRIPT_ALL;
		end;
		\$\$
	EOM
	export PGPASSWORD=${GEMSchemaOwnerPassword_GC}
	psql "${SSL_Argument} host=${Database_Host} port=${Database_Port} user=${GEMSchemaOwner_GC} dbname=${Database_Name}" -f ${assignAUDITTriggersSQLFile} > ${assignAUDITTriggersSQLError} 2>>${assignAUDITTriggersSQLError}
}
