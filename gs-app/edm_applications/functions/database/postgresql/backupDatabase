### Backup Database
function backupDatabase()
{
	### Initialize
	initializeDatabase

	## Set directories/files
	now=`date -u '+%Y%m%d_%H%M'`
	backupDatabaseStartTime=$(date +%s)
	backupDatabaseLogFolder="/${mount_home}/logs/DatabaseOperations/backupDatabase/${now}"
	backupDatabaseLogFile="${backupDatabaseLogFolder}/backupDatabase.log"
	backupDatabaseWorkFolder="${backupDatabaseLogFolder}/work"
	backupDatabaseBucketLogFileError="${backupDatabaseWorkFolder}/backupDatabase-bucket.err"

	backupDatabaseFolder="/${mount_home}/${DatabaseBackup_StoragePath}/${now}"
	schemasFile=${backupDatabaseLogFolder}/schemas.output

	### Create folders
	rm -rf ${backupDatabaseFolder} 
	mkdir -p ${backupDatabaseLogFolder} ${backupDatabaseWorkFolder} ${backupDatabaseFolder}

	### Check if Database exists
	checkDatabaseExists
	if [ ! "${databaseExists}" == "1" ]; then
		echoLog "ERROR" "Database - ${Database_Name} does not exists" "Backup Database" | tee -a ${restoreDatabaseLogFile}
		exit 1
	fi

	### Retrieve Schemas
	schemaCount=1
	for schema in ${SchemaOwner_Filter}
	do
		### Define Backup artefacts
		backupFile=${backupDatabaseFolder}/${schema}.sql
		backupProperties=${backupDatabaseFolder}/backup.config
		backupFileErrorLog=${backupDatabaseWorkFolder}/${schema}.err

		### Retrieve 'schema_type'
		schemaTypeCount=1
		for schemaType in ${SchemaTypes}
		do
			if [ $schemaCount -eq $schemaTypeCount ]; then
				break
			fi
			((schemaTypeCount += 1))
		done
		
		### Handle Blob only for 'Repository' schema
		exportBlob=""
		if [ "${schemaType}" == "Repository" ]; then
			exportBlob="--blobs"
		fi

		### Backup schema 
		executeCommandAndCheckError "pg_dump \"host=${Database_Host} port=${Database_Port} user=${Database_Owner_User} dbname=${Database_Name} ${SSL_Argument}\" -Z0 --no-password ${exportBlob} --schema=${schema} --no-owner --no-privileges ${Export_Tablespaces} --file=${backupFile} > /dev/null 2>>${backupFileErrorLog}" "Backup Database" "Schema - ${schema}" "${backupDatabaseLogFile}" "backupFileErrorLog" &

		### Update Backup Config
		echo "${schemaType}:${schema}:${schema}.sql" >> ${backupProperties}
		((schemaCount += 1))
	done
	wait
	
	### Copy to mount
	executeCommandAndCheckError "copyFromMountToBucket ${backupDatabaseFolder} ${backupDatabaseBucketLogFileError} ${now}" "Backup Database" "Copy to - mount" "${backupDatabaseLogFile}" "backupDatabaseBucketLogFileError"
	echoLog "INFO" "Copied to - bucket" "Backup Database" | tee -a ${logFile}

	computeElapsedTime ${backupDatabaseStartTime}
	echoLog "INFO" "Database - ${Database_Name} - Completed - ${elapsedTimeTaken}" "Backup Database" | tee -a ${backupDatabaseLogFile}
}
