{
  "Version": "8.8.1.39.001",
  "Client": "GoldenSourceGCP",
  "Instance": "edmcoba (Non-Production)",
  "Cloud": "gcp",
  "Public": "false",
  "Docapi": {
    "client_id": "${Docapi_client_id}",
    "client_secret": "${Docapi_client_secret}",
    "username": "${Docapi_username}",
    "password": "${Docapi_password}",
    "grant_type": "password",
    "query_url": "${Docapi_url}",
    "token_endpoint": "${Docapi_token_endpoint}"
  },
  "Applications": [
    {
      "order": 1,
      "group": "Setup/Configurations",
      "name": "MappingDesigner",
      "brief_description": "Tool for visual Data Mapping",
      "description": "Mapping Designer is a tool that visually determines input data structures and defines rules for translating input into target message structures.\n\nIt works with a mapping engine to translate data from external sources into formats readable by business engines, such as the Reference Data application.\n\nMapping Designer aids in developing, testing, tracing, and managing mapping functions, including vendor data input, MDX creation, debugging, and field mapping between the MDX and the Datamodel.",
      "url": "https://${KUBE_EXTERNAL_LB}/GS/protected/index/layout.vm",
      "enable": true
    },
    {
      "order": 1,
      "group": "Setup/Configurations",
      "name": "GSODesigner",
      "brief_description": "Tool for managing and defining GSOs",
      "description": "GSO Designer refers to the GoldenSource Object, which is a set of logically structured fields representing financial entities like Equity, Issuer, and Market.\n\nIt consists of data-groups with related fields.\n\nThe GSO Designer is used to create, export, import, and define rules for GSOs, including tasks like creating GSO definitions, data groups, fields, relations, and configurations.\n\nThe target audience for using the GSO Designer includes individuals with knowledge of the financial domain, data models, and business feeds.",
      "url": "https://${KUBE_EXTERNAL_LB}/GS/protected/index/layout.vm",
      "enable": true
    },
    {
      "order": 1,
      "group": "Setup/Configurations",
      "name": "Flowstudio",
      "brief_description": "Integrated platform for Workflow Management",
      "description": "The Flow Studio application provides various perspectives for managing and monitoring an application. \n\nThe Flow Studio consists of perspectives, each designed to cater to different needs\n\nConfigure Orchestrator Perspective is used for setting up and managing application components, including workflows, resources, and vendor definitions. It helps in configuring events, queries, and tasks related to the Orchestrator application.\n\nTrace Orchestrator Perspective focuses on providing runtime information about the application, such as workflow execution details, logs, debugging information, and general statistics.\nIt helps in tracking the performance and troubleshooting issues.\n\nOperations and Monitoring Perspective provides an overview of the application's health and operational status. It displays information such as detected problems, warnings, cluster nodes, exception management jobs, batch processes, schedules, and log entries",
      "url": "https://${KUBE_EXTERNAL_LB}/Flowstudio/",
      "enable": false
    },
    {
      "order": 2,
      "group": "Data Management",
      "name": "Workstation",
      "brief_description": "Web-based hub for Data Management",
      "description": "The Workstation application provides comprehensive features for efficient data management and streamlined operations.\n\nIt includes robust data ingestion, validation, and enrichment, supports CRUD operations on entities. \n\nIt also facilitates Maker/Checker approval processes, and offers workflow and approval mechanisms for data governance and compliance.",
      "url": "https://${KUBE_EXTERNAL_LB}/GS/protected/index/layout.vm",
      "enable": true
    },
    {
      "order": 2,
      "group": "Data Management",
      "name": "QuantWorkbench",
      "brief_description": "Analytical and Development environment",
      "description": "Quant Workbench (QWB) is an analytical and quantitative development environment designed to control and utilize master data for quantitative finance and financial engineering.\n\nIt enables analysts and quantitative developers to work with centralized, validated data.\n\nKey features include the ability to build Python scripts for financial models such as PCA and the Black-Scholes Model, integrate with various data sources including in-house and staging areas, and use tools like the GSO Query Tool and Portfolio Analytics for data analysis and visualization.\n\nQuant Workbench supports the development of quantitative routines by integrating with open-source libraries like NumPy, SciPy, and QuantLib, and retrieving data from multiple sources.",
      "url": "https://${KUBE_EXTERNAL_LB}/qwb/",
      "enable": true
    },
    {
      "order": 2,
      "group": "Data Management",
      "name": "OMNI",
      "brief_description": "Cloud warehouse and Analytics",
      "description": "OMNI is a data application that offers various schemas tailored for specific purposes, including raw and structured schemas designed to facilitate rapid data ingestion without the need for mastering it.\n\nIt categorizes data into four groups viz., Raw, Structured, Refined, and Aggregated.\n\nUsers can analyze data through different lenses such as a whole portfolio view, detailed private market holdings, top issuer exposure, and more to gain investment insights.\n\nOMNI accelerates snowflake and AI/ML strategies by efficiently mapping investment data for training AI models, generating industry-standard data schemas, and facilitating data population from various systems.\n\nIt is not a data mastering solution but offers data pipelining, mapping, and transformation capabilities, and it is not a standalone Lakehouse platform.",
      "url": "https://${KUBE_EXTERNAL_LB}/omni/",
      "enable": false
    },
    {
      "order": 3,
      "group": "Orchestrator",
      "name": "Fileloading",
      "brief_description": "Data ingestion for Internal/External feeds",
      "description": "The Orchestrator Fileloading Application focuses on efficient data ingestion and processing.\n\nIt offers features like data ingestion from various file formats, data mapping, validation, error handling, data enrichment, and batch processing.\n\nThe module allows for bulk file loading workflows to handle large data volumes, breaking files into message bulks for processing and committing data to the database.\n\nAdditionally, Orchestrator supports APIs, including both REST and SOAP, to facilitate seamless integration with other systems.",
      "url": "https://${KUBE_EXTERNAL_LB}/fileloading/rest/",
      "enable": true
    },
    {
      "order": 3,
      "group": "Orchestrator",
      "name": "Publishing",
      "brief_description": "Data distribution for Internal/External consumers",
      "description": "The Orchestrator Publishing Application focuses on efficient data distribution and processing.\n\nIt offers features like data distribution across various channels, data mapping, validation, error handling, data enrichment, and batch processing.\n\nThe module allows for bulk data distribution workflows to handle large data volumes, breaking files into message bulks for processing and distributing data to the target systems.\n\nAdditionally, Orchestrator supports APIs, including both REST and SOAP, to facilitate seamless integration with other systems.",
      "url": "https://${KUBE_EXTERNAL_LB}/publishing/rest/",
      "enable": true
    },
    {
      "order": 3,
      "group": "Orchestrator",
      "name": "Pricing",
      "brief_description": "Data ingestion for Price Data feeds",
      "description": "The Orchestrator Pricing Application focuses on efficient data ingestion and processing relating to pricing data.\n\nIt offers features like data ingestion from various file formats, data mapping, validation, error handling, data enrichment, and batch processing.\n\nThe module allows for bulk file loading workflows to handle large data volumes, breaking files into message bulks for processing and committing data to the database.\n\nAdditionally, Orchestrator supports APIs, including both REST and SOAP, to facilitate seamless integration with other systems.",
      "url": "https://${KUBE_EXTERNAL_LB}/pricing/rest/",
      "enable": false
    },
    {
      "order": 4,
      "group": "API",
      "name": "GSOService",
      "brief_description": "EDM Platform APIs ",
      "description": "The GSOService API utilizes OpenAPI standards to provide a standardized approach for defining and interacting with its endpoints.\n\nOpenAPI enables clear and detailed documentation of the APIs functionality, including its endpoints, request and response formats, and authentication methods.\n\nThe APIs endpoints and operations are defined with standardized paths and HTTP methods, and data formats are described using JSON Schema, which helps with data validation and integrity.\n\nSecurity aspects, including OAuth 2.0 and API keys, are detailed in the API specification to ensure proper access control. OpenAPI also supports versioning, allowing for structured management of API updates and backward compatibility.\n\nAdditionally, automated code generation tools facilitate the creation of client libraries and server stubs, enhancing development efficiency and consistency.\n\nGSOService is an essential component of the EDM platform that provides programmatic access to system functionality and data.\n\nIt allows data retrieval, CRUD operations, and execution of business rules within the EDM platform.\n\nAdditionally, GSOService involves various aspects such as request headers, response payloads, status codes, credentials, data formats, parameters, and input payloads.",
      "url": "https://${KUBE_EXTERNAL_LB}/GSOService/",
      "enable": true
    },
    {
      "order": 5,
      "group": "Test Automation",
      "name": "EDMA",
      "brief_description": "Test Automation Platform",
      "description": "EDMA(Enterprise Data Management Automation) is a test automation framework designed for both web-based and backend test execution.\n\nIt supports record-and-play functionality for building test suites and includes dashboards for monitoring test execution status and generating reports.",
      "url": "https://${KUBE_EXTERNAL_LB}/Automation/",
      "enable": true
    },
    {
      "order": 6,
      "group": "SSO",
      "name": "Keycloak",
      "brief_description": "Identity and access management",
      "description": "EDM platform supports integration using Keycloak for identity and access management.\n\nKeycloak is an open-source identity and access management solution that offers single sign-on (SSO), user federation with external directories, identity brokering for third-party logins, and access management with roles and permissions.\n\nIt supports social logins, two-factor authentication, and various authentication protocols like OAuth 2.0, OpenID Connect, and SAML.\n\nKeycloak provides a web-based management console for configuring these features.",
      "url": "https://${KUBE_EXTERNAL_LB}/auth/",
      "enable": true
    },
    {
      "order": 6,
      "group": "SSO",
      "name": "LDAPManagement",
      "brief_description": "LDAP User/Group management",
      "description": "LDAP Management application provides management of LDAP directory services.",
      "url": "https://",
      "enable": false
    },
    {
      "order": 7,
      "group": "Application Diagnostics",
      "name": "JVMMonitoring",
      "brief_description": "Manage and Monitor Java applications",
      "description": "EDM Platform utilizes Hawtio for Application Diagnostics.\n\nHawtio is a web-based user interface (UI) that provides a powerful and interactive way to manage and monitor Java applications.\n\nIt offers capabilities for tracking performance metrics, viewing logs, and checking application health.\n\nAdditionally, Hawtio allows for managing application deployments, configuring resources, and controlling services.\n\nIt also provides access to JMX (Java Management Extensions) and other management tools.",
      "url": "https://${KUBE_EXTERNAL_LB}/hawtio/",
      "enable": true
    },
    {
      "order": 8,
      "group": "Utilities",
      "name": "Jobscheduler",
      "brief_description": "Job Scheduling and Workload Automation",
      "description": "EDM Platform utilizes SOS Berlin for job scheduling and workload automation.\n\nSOS Berlin is a job scheduling and workload automation solution designed to manage and automate IT processes and tasks.\n\nIt automates task execution based on schedules, triggers, or dependencies and handles complex workflows with multiple steps or processes.\n\nThe platform provides real-time monitoring of job execution and system performance, with alerting capabilities for issues or failures.\n\nIt integrates with various systems, applications, and databases, allowing for a unified approach to job management. Additionally, it offers reporting tools to track job performance and execution history.",
      "url": "https://${KUBE_EXTERNAL_LB}/joc/",
      "enable": true
    },
    {
      "order": 8,
      "group": "Utilities",
      "name": "Filebrowser",
      "brief_description": "Manage Folders/Files on Linux Environment",
      "description": "EDM Platform utilizes Filebrowser application for managing Linux directories and files.\n\nFilebrowser allows users to view, manage, and organize files and directories on a computer or network.\n\nIt provides a graphical interface for navigating through the file system, performing operations such as copying, moving, deleting, and renaming files and directories.",
      "url": "https://${KUBE_EXTERNAL_LB}/filebrowser/",
      "enable": true
    },
    {
      "order": 8,
      "group": "Utilities",
      "name": "Cloudbeaver",
      "brief_description": "Web-based Database Management Tool",
      "description": "EDM Platform utilizes CloudBeaver for Database queries.\n\nCloudBeaver is a web-based database management tool designed to offer a universal SQL client for managing databases.\n\nIt provides a user-friendly interface that allows users to connect to various database systems and perform tasks such as querying, managing, and visualizing data.\n\nCloudBeaver supports multiple database types, including relational databases like PostgreSQL, and Oracle.\n\nIts features include SQL editor with syntax highlighting, data browsing, query execution, and database schema management.",
      "url": "https://${KUBE_EXTERNAL_LB}/cloudbeaver/",
      "enable": true
    },
    {
      "order": 9,
      "group": "Support",
      "name": "Product Documentation",
      "brief_description": "Confluence based documentation",
      "description": "EDM Platform utilizes Confluence as a platform for managing and sharing product documentation.\n\nConfluence serves as a centralized knowledge base where teams can collaboratively create, organize, and update documentation related to GoldenSource's products and services",
      "url": "https://thegoldensource.atlassian.net/wiki/home",
      "enable": true
    },
    {
      "order": 9,
      "group": "Support",
      "name": "Jira",
      "brief_description": "Ticketing Application",
      "description": "GoldenSource uses Jira Service Desk as a platform for managing customer support and service requests.\n\nJira Service Desk provides a structured and efficient way for GoldenSource to handle incoming tickets, track issues, and manage service-level agreements (SLAs).",
      "url": "https://thegoldensource.atlassian.net/jira/",
      "enable": true
    }
  ]
}
